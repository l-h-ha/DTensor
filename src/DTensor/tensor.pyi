from typing import Any, Optional, Tuple, Callable, Union

import numpy.typing as npt


def get_device(obj: Any) -> str: ...
def is_same_device(a: Any, b: Any, convert_if_necessary: bool = False, raise_if_fail: bool = False) -> bool: ...
def is_cpu(obj: Any, raise_if_fail: bool = False) -> bool: ...
def is_gpu(obj: Any, raise_if_fail: bool = False) -> bool: ...
def validate_device_str(string: str, raise_if_fail: bool = False) -> bool: ...
def convert_to_array(obj: Any, dtype: Optional[npt.DTypeLike] = None, device: Optional[str] = None) -> Any: ...
def type_ok_for_operation(obj: Any, raise_if_fail: bool = False) -> bool: ...
def double_operand_operation(a: Any, b: Any, callback: Callable[[Tensor], Tensor], backward_callback: Callable[[Tensor, Tensor, Tensor], None], dtype: Optional[npt.DTypeLike] = None, in_place: bool = False) -> Tensor: ...
def single_operand_operation(a: Any, callback: Callable[[Tensor], Tensor], backward_callback: Callable[[Tensor, Tensor, Tensor], None], in_place: bool = False) -> Tensor: ...

def add(a: Tensor, b: Tensor, dtype: Optional[npt.DTypeLike] = None) -> Tensor: ...
def subtract(a: Tensor, b: Tensor, dtype: Optional[npt.DTypeLike] = None) -> Tensor: ...
def multiply(a: Tensor, b: Tensor, dtype: Optional[npt.DTypeLike] = None) -> Tensor: ...
def divide(a: Tensor, b: Tensor, dtype: Optional[npt.DTypeLike] = None) -> Tensor: ...
def power(a: Tensor, b: Tensor, dtype: Optional[npt.DTypeLike] = None) -> Tensor: ...
def dot(a: Tensor, b: Tensor, dtype: Optional[npt.DTypeLike] = None) -> Tensor: ...
def matmul(a: Tensor, b: Tensor, dtype: Optional[npt.DTypeLike] = None) -> Tensor: ...

def mean(a, axis: Optional[Union[int, Tuple]] = None, dtype: Optional[npt.DTypeLike] = None, keepdims: bool = False, in_place: bool = False) -> Tensor: ...
def square(a, dtype: Optional[npt.DTypeLike] = None, in_place: bool = False) -> Tensor: ...

class Tensor():
    data: Any
    dtype: npt.DTypeLike
    device: str
    prev: Tuple
    requires_grad: bool

    def __init__(self, data: Any, dtype: Optional[npt.DTypeLike] = None, device: Optional[str] = None, prev: Tuple = (), requires_grad: bool = False) -> None: ...

    @property
    def shape(self) -> Tuple: ...
    @property
    def size(self) -> Tuple: ...
    @property
    def ndim(self) -> Tuple: ...

    def add(self, b: Any, dtype: Optional[npt.DTypeLike] = None, in_place: bool = False) -> Tensor: ...
    def subtract(self, b: Any, dtype: Optional[npt.DTypeLike] = None, in_place: bool = False) -> Tensor: ...
    def multiply(self, b: Any, dtype: Optional[npt.DTypeLike] = None, in_place: bool = False) -> Tensor: ...
    def divide(self, b: Any, dtype: Optional[npt.DTypeLike] = None, in_place: bool = False) -> Tensor: ...
    def power(self, b: Any, dtype: Optional[npt.DTypeLike] = None, in_place: bool = False) -> Tensor: ...
    def dot(self, b: Any, in_place: bool = False) -> Tensor: ...
    def matmul(self, b: Any, dtype: Optional[npt.DTypeLike] = None, in_place: bool = False) -> Tensor: ...

    def mean(self, axis: Optional[Union[int, Tuple]] = None, dtype: Optional[npt.DTypeLike] = None, keepdims: bool = False, in_place: bool = False) -> Tensor: ...
    def square(self, dtype: Optional[npt.DTypeLike] = None, in_place: bool = False) -> Tensor: ...


    def __add__(self, other: Any) -> Tensor: ...
    def __radd__(self, other: Any) -> Tensor: ...
    def __iadd__(self, other: Any) -> Tensor: ...

    def __sub__(self, other: Any) -> Tensor: ...
    def __rsub__(self, other: Any) -> Tensor: ...
    def __isub__(self, other: Any) -> Tensor: ...

    def __mul__(self, other: Any) -> Tensor: ...
    def __rmul__(self, other: Any) -> Tensor: ...
    def __imul__(self, other: Any) -> Tensor: ...

    def __truediv__(self, other: Any) -> Tensor: ...
    def __rtruediv__(self, other: Any) -> Tensor: ...
    def __itruediv__(self, other: Any) -> Tensor: ...

    def __pow__(self, other: Any) -> Tensor: ...
    def __rpow__(self, other: Any) -> Tensor: ...
    def __ipow__(self, other: Any) -> Tensor: ...

    def __matmul__(self, other: Any) -> Tensor: ...
    def __rmatmul__(self, other: Any) -> Tensor: ...
    def __imatmul__(self, other: Any) -> Tensor: ...

    def __repr__(self) -> str: ...